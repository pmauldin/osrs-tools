{"version":3,"sources":["components/QuestsPage/QuestList/Quest/constants.js","actions/quests.js","services/storageService.js","reducers/questReducers.js","reducers/index.js","configureStore.js","components/QuestsPage/QuestList/Quest/Quest.js","types/quests.js","components/QuestsPage/QuestList/Quest/index.js","components/QuestsPage/QuestList/QuestList.js","components/QuestsPage/QuestList/index.js","components/QuestsPage/QuestFilters/QuestFilters.js","components/QuestsPage/QuestFilters/index.js","components/QuestsPage/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["QUEST_STATUS","DONE","IN_PROGRESS","NOT_STARTED","LOAD_QUESTS","LOAD_QUESTS_SUCCESS","LOAD_QUESTS_ERROR","TOGGLE_QUEST_CARD","loadQuestsSuccess","quests","type","loadQuestsError","error","clearQuestCards","localStorage","removeItem","clearQuests","storageService","setQuestCards","cards","setItem","JSON","stringify","getQuestCards","getItem","parse","err","setQuests","getQuests","combineReducers","newState","state","arguments","length","undefined","action","reduce","map","quest","id","pageOptions","Object","objectSpread","forEach","questName","name","status","reqsMet","collapsed","questId","defineProperty","rootReducer","questPage","questReducers","loggerMiddleware","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preLoadedState","getQuestStatusClass","PropTypes","shape","string","isRequired","members","boolean","difficulty","series","arrayOf","description","start_point","image","wiki_url","wiki_quick_guide_url","developer","requirements","quest_points","number","skills","object","items","misc","rewards","oneOf","keys","bool","Quest","_ref","toggleCard","react_default","a","createElement","className","onClick","checked","concat","connect","dispatch","QuestList","QuestList_Quest","assign","key","QuestFilters","refreshQuests","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","json","console","log","t0","abrupt","stop","_x","apply","this","QuestsPage","QuestsPage_QuestFilters","QuestsPage_QuestList","App","components_QuestsPage","store","createStore","applyMiddleware","thunkMiddleware","ReactDom","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.0847f7a1.chunk.js","sourcesContent":["export const QUEST_STATUS = {\r\n    DONE: 'DONE',\r\n    IN_PROGRESS: 'IN_PROGRESS',\r\n    NOT_STARTED: 'NOT_STARTED'\r\n};","export const LOAD_QUESTS = 'LOAD_QUESTS';\r\nexport const LOAD_QUESTS_SUCCESS = 'LOAD_QUESTS_SUCCESS';\r\nexport const LOAD_QUESTS_ERROR = 'LOAD_QUESTS_ERROR';\r\nexport const TOGGLE_QUEST_CARD = 'TOGGLE_QUEST_CARD';\r\n\r\nexport function loadQuests() {\r\n    return {\r\n        type: LOAD_QUESTS\r\n    }\r\n}\r\n\r\nexport function loadQuestsSuccess(quests) {\r\n    return {\r\n        type: LOAD_QUESTS_SUCCESS,\r\n        quests\r\n    }\r\n}\r\n\r\nexport function loadQuestsError(error) {\r\n    return {\r\n        type: LOAD_QUESTS_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport function toggleQuestCard(questId) {\r\n    return {\r\n        type: TOGGLE_QUEST_CARD,\r\n        questId\r\n    }\r\n}\r\n\r\nexport function fetchQuests() {\r\n    return async dispatch => {\r\n        let quests = [];\r\n        let error = null;\r\n\r\n        try {\r\n            dispatch(loadQuests());\r\n            const response = await fetch('http://localhost:1337/quests.json');\r\n            quests = await response.json();\r\n            console.log(JSON.stringify(quests));\r\n        } catch (err) {\r\n            console.error(\"Error fetching posts:\", err);\r\n            error = err;\r\n        }\r\n\r\n        if (!error) {\r\n            dispatch(loadQuestsSuccess(quests));\r\n            return true;\r\n        } else {\r\n            dispatch(loadQuestsError(error));\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","const CARDS_KEY = \"QUEST_CARDS\";\r\nconst QUESTS_KEY = \"QUESTS\";\r\n\r\nconst setQuestCards = (cards) => {\r\n    localStorage.setItem(CARDS_KEY, JSON.stringify(cards));\r\n};\r\n\r\nconst getQuestCards = () => {\r\n    const cards = localStorage.getItem(CARDS_KEY);\r\n\r\n    if (!cards) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        return JSON.parse(cards);\r\n    } catch (err) {\r\n        clearQuestCards();\r\n        return {}\r\n    }\r\n};\r\n\r\nconst clearQuestCards = () => {\r\n    localStorage.removeItem(CARDS_KEY);\r\n};\r\n\r\nconst setQuests = (quests) => {\r\n    localStorage.setItem(QUESTS_KEY, JSON.stringify(quests));\r\n};\r\n\r\nconst getQuests = () => {\r\n    const quests = localStorage.getItem(QUESTS_KEY);\r\n\r\n    if (!quests) {\r\n        return {};\r\n    }\r\n\r\n    try {\r\n        return JSON.parse(quests);\r\n    } catch (err) {\r\n        clearQuests();\r\n        return {}\r\n    }\r\n};\r\n\r\nconst clearQuests = () => {\r\n    localStorage.removeItem(QUESTS_KEY);\r\n};\r\n\r\nexport default {\r\n    setQuestCards,\r\n    getQuestCards,\r\n    clearQuestCards,\r\n    setQuests,\r\n    getQuests,\r\n    clearQuests\r\n}","import {combineReducers} from 'redux';\r\nimport {QUEST_STATUS} from \"../components/QuestsPage/QuestList/Quest/constants\";\r\n\r\nimport {\r\n    LOAD_QUESTS, LOAD_QUESTS_ERROR, LOAD_QUESTS_SUCCESS\r\n} from '../actions/quests'\r\nimport {TOGGLE_QUEST_CARD} from \"../actions/quests\";\r\nimport storageService from \"../services/storageService\";\r\n\r\nfunction quests(state = storageService.getQuests(), action) {\r\n    let newState;\r\n\r\n    switch (action.type) {\r\n        case LOAD_QUESTS:\r\n            newState = state;\r\n            break;\r\n        case LOAD_QUESTS_SUCCESS:\r\n            newState = action.quests.reduce((map, quest) => {\r\n                map[quest.id] = quest;\r\n                return map;\r\n            }, {});\r\n            break;\r\n        case LOAD_QUESTS_ERROR:\r\n            newState = {};\r\n            break;\r\n        default:\r\n            newState = state;\r\n    }\r\n\r\n    storageService.setQuests(newState);\r\n    return newState;\r\n}\r\n\r\nfunction pageOptions(state = {}, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction cards(state = storageService.getQuestCards(), action) {\r\n    let newState;\r\n\r\n    switch (action.type) {\r\n        case LOAD_QUESTS_SUCCESS:\r\n            const quests = action.quests;\r\n\r\n            newState = { ...state };\r\n\r\n            quests.forEach(quest => {\r\n                if (!newState[quest.id]) {\r\n                    newState[quest.id] = {\r\n                        id: quest.id,\r\n                        questName: quest.name,\r\n                        status: QUEST_STATUS.NOT_STARTED,\r\n                        reqsMet: false,\r\n                        collapsed: true\r\n                    }\r\n                }\r\n            });\r\n            break;\r\n        case TOGGLE_QUEST_CARD:\r\n            const {questId} = action;\r\n            newState = {\r\n                ...state,\r\n                [questId]: {\r\n                    ...state[questId],\r\n                    collapsed: !state[questId].collapsed\r\n                }\r\n            };\r\n            break;\r\n        default:\r\n            newState = state;\r\n    }\r\n\r\n    storageService.setQuestCards(newState);\r\n    return newState;\r\n}\r\n\r\nexport default combineReducers({\r\n    quests,\r\n    pageOptions,\r\n    cards\r\n});","import { combineReducers } from 'redux';\r\nimport questReducers from \"./questReducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    questPage: questReducers\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(preLoadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preLoadedState,\r\n        composeEnhancers(applyMiddleware(thunkMiddleware, loggerMiddleware))\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './quest.css';\r\nimport {QUEST_STATUS} from \"./constants\";\r\nimport {questType} from \"../../../../types/quests\"\r\n\r\nconst getQuestStatusClass = (status, reqsMet) => {\r\n    switch (status) {\r\n        case QUEST_STATUS.DONE:\r\n            return 'quest-done';\r\n        case QUEST_STATUS.IN_PROGRESS:\r\n            return 'quest-in-progress';\r\n        default:\r\n            if (reqsMet) {\r\n                return 'quest-can-start';\r\n            }\r\n            return 'quest-cannot-start';\r\n    }\r\n};\r\n\r\nconst Quest = ({quest, status, reqsMet, collapsed, toggleCard}) => {\r\n    const { name, requirements } = quest;\r\n\r\n    return (\r\n        <div className={'quest'}>\r\n            <div className={'quest-header'} onClick={() => toggleCard(quest.id)}>\r\n                <div className={'quest-checkbox'}>\r\n                    <input type={'checkbox'} checked={status === QUEST_STATUS.DONE} />\r\n                </div>\r\n                <div className={`quest-name ${getQuestStatusClass(status, reqsMet)}`}>\r\n                    {name}\r\n                </div>\r\n                <div className={`chevron ${collapsed ? 'chevron-right' : 'chevron-down'}`} />\r\n            </div>\r\n            <div className={collapsed ? 'quest-collapsed' : 'quest-content'}>\r\n                {requirements && requirements.quest_points > 0 &&\r\n                    <div className={'quest-requirements'}>\r\n                        Requirements: {requirements.quest_points} Quest Points\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nQuest.propTypes = {\r\n    quest: questType.isRequired,\r\n    status: PropTypes.oneOf(Object.keys(QUEST_STATUS)).isRequired,\r\n    reqsMet: PropTypes.bool.isRequired,\r\n    collapsed: PropTypes.bool.isRequired,\r\n    toggleCard: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Quest;","import PropTypes from \"prop-types\";\r\nimport {QUEST_STATUS} from \"../components/QuestsPage/QuestList/Quest/constants\";\r\n\r\nexport const questType = PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    members: PropTypes.boolean,\r\n    type: PropTypes.string.isRequired,\r\n    difficulty: PropTypes.string,\r\n    length: PropTypes.string,\r\n    series: PropTypes.arrayOf(PropTypes.string),\r\n    description: PropTypes.string,\r\n    start_point: PropTypes.string,\r\n    image: PropTypes.string,\r\n    wiki_url: PropTypes.string.isRequired,\r\n    wiki_quick_guide_url: PropTypes.string,\r\n    developer: PropTypes.string,\r\n    requirements: PropTypes.shape({\r\n        quest_points: PropTypes.number,\r\n        skills: PropTypes.arrayOf(PropTypes.object), // TODO\r\n        quests: PropTypes.arrayOf(PropTypes.string),\r\n        items: PropTypes.arrayOf(PropTypes.object), // TODO\r\n        misc: PropTypes.arrayOf(PropTypes.string)\r\n    }),\r\n    // recommended_requirements: PropTypes.array,\r\n    rewards: PropTypes.string\r\n});\r\n\r\nexport const questCardType = PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    questName: PropTypes.string.isRequired,\r\n    status: PropTypes.oneOf(Object.keys(QUEST_STATUS)).isRequired,\r\n    reqsMet: PropTypes.bool.isRequired,\r\n    collapsed: PropTypes.bool.isRequired\r\n});","import {connect} from 'react-redux';\r\n\r\nimport Quest from './Quest';\r\nimport {toggleQuestCard} from \"../../../../actions/quests\";\r\n\r\nexport default connect((state, { questId }) => {\r\n    return {\r\n        quest: state.questPage.quests[questId],\r\n        questId: questId,\r\n        ...state.questPage.cards[questId]\r\n    }\r\n}, (dispatch) => {\r\n    return {\r\n        toggleCard: (id) => dispatch(toggleQuestCard(id))\r\n    }\r\n})(Quest);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport Quest from \"./Quest\";\r\nimport {questType, questCardType} from \"../../../types/quests\";\r\n\r\nconst QuestList = ({ cards }) => {\r\n    // todo filter quests\r\n\r\n    return (\r\n        <div className={`quest-list`}>\r\n            {Object.keys(cards).map(questId => (\r\n                <Quest key={questId} questId={questId} {...cards[questId]} />\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nQuestList.propTypes = {\r\n    // quests: PropTypes.objectOf(questType).isRequired,\r\n    // pageOptions: PropTypes.shape({\r\n    //     filters: PropTypes.array,\r\n    //     sortBy: PropTypes.string,\r\n    //     searchTerm: PropTypes.string\r\n    // }),\r\n    cards: PropTypes.objectOf(questCardType).isRequired\r\n};\r\n\r\nexport default QuestList;","import {connect} from 'react-redux';\r\n\r\nimport QuestList from './QuestList';\r\n\r\nexport default connect((state) => {\r\n    return {\r\n        quests: state.questPage.quests,\r\n        // pageOptions: state.questPage.pageOptions,\r\n        cards: state.questPage.cards\r\n    }\r\n})(QuestList);","import React from 'react';\r\n// import PropTypes from \"prop-types\";\r\n\r\nconst QuestFilters = ({ refreshQuests }) => {\r\n    return (\r\n        <div className={`quest-filters`} onClick={() => refreshQuests()}>\r\n            Filters bruh\r\n        </div>\r\n    )\r\n};\r\n\r\n// QuestList.propTypes = {\r\n//     quests: PropTypes.objectOf(PropTypes.shape({\r\n//         name: PropTypes.string.isRequired,\r\n//         requirements: PropTypes.array.isRequired,\r\n//         wikiLink: PropTypes.string\r\n//     })).isRequired,\r\n//     pageOptions: PropTypes.shape({\r\n//         filters: PropTypes.array,\r\n//         sortBy: PropTypes.string,\r\n//         searchTerm: PropTypes.string\r\n//     }),\r\n//     cards: PropTypes.objectOf(PropTypes.shape({\r\n//         status: PropTypes.oneOf(Object.keys(QUEST_STATUS)).isRequired,\r\n//         reqsMet: PropTypes.bool.isRequired,\r\n//         collapsed: PropTypes.bool.isRequired\r\n//     })).isRequired\r\n// };\r\n\r\nexport default QuestFilters;","import {connect} from 'react-redux';\r\n\r\nimport QuestFilters from './QuestFilters';\r\nimport {fetchQuests} from \"../../../actions/quests\";\r\n\r\nexport default connect(null, (dispatch) => {\r\n    return {\r\n        refreshQuests: () => dispatch(fetchQuests())\r\n    };\r\n})(QuestFilters);","import React from 'react';\r\n\r\nimport './quests-page.css';\r\nimport QuestList from \"./QuestList\";\r\nimport QuestFilters from \"./QuestFilters\";\r\n\r\nconst QuestsPage = () => (\r\n    <div className={`page-content quest-page`}>\r\n        <div className={`quest-page-title`}>Quests</div>\r\n        <div className={`quest-filters-container`}>\r\n            <QuestFilters />\r\n        </div>\r\n        <div className={`quest-list-container`}>\r\n            <QuestList />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default QuestsPage;","import React from 'react';\r\n\r\nimport './app.css';\r\nimport QuestsPage from \"../QuestsPage\";\r\n\r\nconst App = () => (\r\n    <div className='app'>\r\n        <QuestsPage/>\r\n    </div>\r\n);\r\n\r\nexport default App;","import App from \"./App\";\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nexport default connect()(App)","import React from 'react'\nimport ReactDom from 'react-dom'\n\nimport './index.css';\n\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\nimport App from './components/App';\n\nconst store = configureStore();\n\nReactDom.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}