{"version":3,"sources":["actions/index.js","reducers/index.js","configureStore.js","components/Picker.js","components/Posts.js","containers/AsyncApp.js","containers/Root.js","index.js"],"names":["SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","requestPosts","subreddit","type","receivePosts","json","posts","data","children","map","child","receivedAt","Date","now","fetchPosts","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","success","response","wrap","_context","prev","next","fetch","concat","sent","t0","console","error","abrupt","stop","_x","apply","this","arguments","shouldFetchPosts","state","postsBySubreddit","isFetching","didInvalidate","fetchPostsIfNeeded","_ref2","_callee2","getState","_context2","_x2","_x3","rootReducer","combineReducers","length","undefined","action","objectSpread","defineProperty","items","lastUpdated","selectedSubreddit","loggerMiddleware","createLogger","Picker","_this$props","props","value","onChange","options","react_default","createElement","e","target","option","key","Component","Posts","post","i","title","AsyncApp","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleRefreshClick","prevProps","_this$props2","nextSubreddit","preventDefault","_this$props3","_this$props4","Picker_Picker","toLocaleTimeString","onClick","style","opacity","Posts_Posts","connect","preLoadedState","store","createStore","applyMiddleware","thunkMiddleware","Root","es","containers_AsyncApp","render","Root_Root","document","getElementById"],"mappings":"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","file":"static/js/main.c84c2487.chunk.js","sourcesContent":["export const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\r\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT';\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\r\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\r\n\r\nexport function selectSubreddit(subreddit) {\r\n    return {\r\n        type: SELECT_SUBREDDIT,\r\n        subreddit\r\n    }\r\n}\r\n\r\nexport function invalidateSubreddit(subreddit) {\r\n    return {\r\n        type: INVALIDATE_SUBREDDIT,\r\n        subreddit\r\n    }\r\n}\r\n\r\nexport function requestPosts(subreddit) {\r\n    return {\r\n        type: REQUEST_POSTS,\r\n        subreddit\r\n    }\r\n}\r\n\r\nexport function receivePosts(subreddit, json) {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        subreddit,\r\n        posts: json.data.children.map(child => child.data),\r\n        receivedAt: Date.now()\r\n    }\r\n}\r\n\r\nfunction fetchPosts(subreddit) {\r\n    return async dispatch => {\r\n        let success = true;\r\n        try {\r\n            dispatch(requestPosts(subreddit));\r\n            const response = await fetch(`https://www.reddit.com/r/${subreddit}.json`);\r\n            const json = await response.json();\r\n            dispatch(receivePosts(subreddit, json));\r\n        } catch (err) {\r\n            console.error(\"Error fetching posts:\", err);\r\n            success = false;\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n    const posts = state.postsBySubreddit[subreddit];\r\n    if (!posts) {\r\n        return true;\r\n    } else if (posts.isFetching) {\r\n        return false;\r\n    } else {\r\n        return posts.didInvalidate;\r\n    }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n    return async (dispatch, getState) => {\r\n        if (shouldFetchPosts(getState(), subreddit)) {\r\n            try {\r\n                await dispatch(fetchPosts(subreddit));\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n\r\n        return 'done';\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport {\r\n    SELECT_SUBREDDIT,\r\n    INVALIDATE_SUBREDDIT,\r\n    REQUEST_POSTS,\r\n    RECEIVE_POSTS\r\n} from '../actions'\r\n\r\nfunction selectedSubreddit(state = 'reactjs', action) {\r\n    switch (action.type) {\r\n        case SELECT_SUBREDDIT:\r\n            return action.subreddit;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction posts(\r\n    state = {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: []\r\n    },\r\n    action\r\n) {\r\n    switch (action.type) {\r\n        case INVALIDATE_SUBREDDIT:\r\n            return {\r\n                ...state,\r\n                didInvalidate: true\r\n            };\r\n        case REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                didInvalidate: false\r\n            };\r\n        case RECEIVE_POSTS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                didInvalidate: false,\r\n                items: action.posts,\r\n                lastUpdated: action.receivedAt\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction postsBySubreddit(state = {}, action) {\r\n    switch (action.type) {\r\n        case INVALIDATE_SUBREDDIT:\r\n        case RECEIVE_POSTS:\r\n        case REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                [action.subreddit]: posts(state[action.subreddit], action)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    postsBySubreddit,\r\n    selectedSubreddit\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default function configureStore(preLoadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preLoadedState,\r\n        applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Picker extends Component {\r\n    render() {\r\n        const { value, onChange, options } = this.props\r\n\r\n        return (\r\n            <span>\r\n        <h1>{value}</h1>\r\n        <select onChange={e => onChange(e.target.value)} value={value}>\r\n          {options.map(option => (\r\n              <option value={option} key={option}>\r\n                  {option}\r\n              </option>\r\n          ))}\r\n        </select>\r\n      </span>\r\n        )\r\n    }\r\n}\r\n\r\nPicker.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n};","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Posts extends Component {\r\n    render() {\r\n        return (\r\n            <ul>\r\n                {this.props.posts.map((post, i) => (\r\n                    <li key={i}>{post.title}</li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    posts: PropTypes.array.isRequired\r\n};","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n    selectSubreddit,\r\n    fetchPostsIfNeeded,\r\n    invalidateSubreddit\r\n} from '../actions'\r\nimport Picker from '../components/Picker'\r\nimport Posts from '../components/Posts'\r\n\r\nclass AsyncApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleRefreshClick = this.handleRefreshClick.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {dispatch, selectedSubreddit} = this.props;\r\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\r\n            const {dispatch, selectedSubreddit} = this.props;\r\n            dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n        }\r\n    }\r\n\r\n    handleChange(nextSubreddit) {\r\n        this.props.dispatch(selectSubreddit(nextSubreddit));\r\n        this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\r\n    }\r\n\r\n    handleRefreshClick(e) {\r\n        e.preventDefault();\r\n\r\n        const {dispatch, selectedSubreddit} = this.props;\r\n        dispatch(invalidateSubreddit(selectedSubreddit));\r\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n    }\r\n\r\n    render() {\r\n        const {selectedSubreddit, posts, isFetching, lastUpdated} = this.props;\r\n        return (\r\n            <div>\r\n                <Picker\r\n                    value={selectedSubreddit}\r\n                    onChange={this.handleChange}\r\n                    options={['reactjs', 'frontend']}\r\n                />\r\n                <p>\r\n                    {lastUpdated && (\r\n                        <span>\r\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\r\n            </span>\r\n                    )}\r\n                    {!isFetching && (\r\n                        <button onClick={this.handleRefreshClick}>Refresh</button>\r\n                    )}\r\n                </p>\r\n                {isFetching && posts.length === 0 && <h2>Loading...</h2>}\r\n                {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\r\n                {posts.length > 0 && (\r\n                    <div style={{opacity: isFetching ? 0.5 : 1}}>\r\n                        <Posts posts={posts}/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAsyncApp.propTypes = {\r\n    selectedSubreddit: PropTypes.string.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    isFetching: PropTypes.bool.isRequired,\r\n    lastUpdated: PropTypes.number,\r\n    dispatch: PropTypes.func.isRequired\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    const {selectedSubreddit, postsBySubreddit} = state;\r\n    const {isFetching, lastUpdated, items: posts} = postsBySubreddit[\r\n        selectedSubreddit\r\n        ] || {\r\n        isFetching: true,\r\n        items: []\r\n    };\r\n\r\n    return {\r\n        selectedSubreddit,\r\n        posts,\r\n        isFetching,\r\n        lastUpdated\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AsyncApp)","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from '../configureStore'\r\nimport AsyncApp from './AsyncApp'\r\n\r\nconst store = configureStore();\r\n\r\nexport default class Root extends Component {\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <AsyncApp />\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\nimport { render } from 'react-dom'\nimport Root from './containers/Root'\n\nrender(<Root />, document.getElementById('root'));"],"sourceRoot":""}