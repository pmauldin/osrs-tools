{"version":3,"sources":["components/QuestsPage/QuestList/Quest/constants.js","actions/quests.js","reducers/questReducers.js","reducers/index.js","configureStore.js","components/QuestsPage/QuestList/Quest/Quest.js","components/QuestsPage/QuestList/Quest/index.js","components/QuestsPage/QuestList/QuestList.js","components/QuestsPage/QuestList/index.js","components/QuestsPage/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["QUEST_STATUS","TOGGLE_QUEST_CARD","startingQuests","Demon Slayer","name","requirements","Prince Ali Rescue","Recipe for Disaster","Black Knight's Fortress","Underground Pass","startingCards","status","reqsMet","collapsed","combineReducers","quests","state","arguments","length","undefined","type","pageOptions","cards","action","questId","Object","objectSpread","defineProperty","rootReducer","questReducers","loggerMiddleware","createLogger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preLoadedState","getQuestStatusClass","Quest","_ref","quest","toggleCard","react_default","a","createElement","className","onClick","checked","concat","connect","dispatch","id","QuestList","keys","map","questName","QuestList_Quest","assign","key","QuestsPage","QuestsPage_QuestList","App","components_QuestsPage","store","createStore","applyMiddleware","thunkMiddleware","ReactDom","render","es","components_App","document","getElementById"],"mappings":"gTAAaA,EACH,OADGA,EAEI,cAFJA,EAGI,yBCHV,IACMC,EAAoB,oBCkEjC,IAAMC,EAAiB,CACnBC,eAAgB,CACZC,KAAQ,eACRC,aAAgB,CACZ,gBAGRC,oBAAqB,CACjBF,KAAQ,oBACRC,aAAgB,CACZ,eAGRE,sBAAuB,CACnBH,KAAQ,sBACRC,aAAgB,CACZ,eAGRG,0BAA2B,CACvBJ,KAAQ,0BACRC,aAAgB,CACZ,SAGRI,mBAAoB,CAChBL,KAAQ,mBACRC,aAAgB,CACZ,oBAKNK,EAAgB,CAClBP,eAAgB,CACZQ,OAAQX,EACRY,SAAS,EACTC,WAAW,GAEfJ,mBAAoB,CAChBE,OAAQX,EACRY,SAAS,EACTC,WAAW,GAEfL,0BAA2B,CACvBG,OAAQX,EACRY,SAAS,EACTC,WAAW,GAEfN,sBAAuB,CACnBI,OAAQX,EACRY,SAAS,EACTC,WAAW,GAEfP,oBAAqB,CACjBK,OAAQX,EACRY,SAAS,EACTC,WAAW,IAkCJC,kBAAgB,CAC3BC,OA/BJ,WAAgD,IAAhCC,EAAgCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxBf,EAGZ,OAHoCe,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC7BC,KAEAJ,GA6BfK,YAzBJ,WAAyC,IAApBL,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAGjB,OAH6BA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACtBC,KAEAJ,GAuBfM,MAnBJ,WAA8C,IAA/BN,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBP,EAAea,EAAQN,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1C,OAAQI,EAAOH,MACX,KAAKnB,EAAL,IACWuB,EAAWD,EAAXC,QACP,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAT,EADPS,OAAAE,EAAA,EAAAF,CAAA,GAEKD,EAFLC,OAAAC,EAAA,EAAAD,CAAA,GAGWT,EAAMQ,GAHjB,CAIQX,WAAYG,EAAMQ,GAASX,cAGvC,QACI,OAAOG,MCnJJY,EAJKd,YAAgB,CAChCC,OAAQc,ICCNC,EAAmBC,yBAEnBC,EAAmBC,OAAOC,sCAAwCC,0BAEjCC,ECJjCC,EAAsB,SAAC1B,EAAQC,GACjC,OAAQD,GACJ,KAAKX,EACD,MAAO,aACX,KAAKA,EACD,MAAO,oBACX,QACI,OAAIY,EACO,kBAEJ,uBAuCJ0B,EAnCD,SAAAC,GAAqD,IAAnDC,EAAmDD,EAAnDC,MAAO7B,EAA4C4B,EAA5C5B,OAAQC,EAAoC2B,EAApC3B,QAASC,EAA2B0B,EAA3B1B,UAAW4B,EAAgBF,EAAhBE,WACxCrC,EAAsBoC,EAAtBpC,KAAMC,EAAgBmC,EAAhBnC,aAEb,OACIqC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,SACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eAAgBC,QAAS,kBAAML,EAAWrC,KACtDsC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACZH,EAAAC,EAAAC,cAAA,SAAOxB,KAAM,WAAY2B,QAASpC,IAAWX,KAEjD0C,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAG,OAAgBX,EAAoB1B,EAAQC,KACrDR,GAELsC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,WAAAG,OAAanC,EAAY,gBAAkB,mBAE7D6B,EAAAC,EAAAC,cAAA,OAAKC,UAAWhC,EAAY,kBAAoB,iBAC5C6B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sBAAhB,iBACmBxC,MC9BpB4C,cAAQ,SAACjC,EAADuB,GAAwB,IAAdf,EAAce,EAAdf,QAC7B,OAAOC,OAAAC,EAAA,EAAAD,CAAA,CACHe,MAAOxB,EAAMD,OAAOA,OAAOS,IACxBR,EAAMD,OAAOO,MAAME,KAE3B,SAAC0B,GACA,MAAO,CACHT,WAAY,SAACU,GAAD,OAAQD,ELFjB,CACH9B,KAAMnB,EACNuB,QKA6C2B,OAPtCF,CASZX,GCqBYc,EA9BG,SAAAb,GAAoCA,EAAjCxB,OAAiCwB,EAAzBlB,YAAyB,IAAZC,EAAYiB,EAAZjB,MAGtC,OACIoB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cACTpB,OAAO4B,KAAK/B,GAAOgC,IAAI,SAAAC,GAAS,OAC7Bb,EAAAC,EAAAC,cAACY,EAAD/B,OAAAgC,OAAA,CAAOC,IAAKH,EAAW/B,QAAS+B,GAAejC,EAAMiC,SCPtDN,cAAQ,SAACjC,GACpB,MAAO,CACHD,OAAQC,EAAMD,OAAOA,OACrBM,YAAaL,EAAMD,OAAOM,YAC1BC,MAAON,EAAMD,OAAOO,QAJb2B,CAMZG,GCKYO,EAVI,kBACfjB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,2BACVH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,oBAAd,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,iBAAd,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,wBACVH,EAAAC,EAAAC,cAACgB,EAAD,SCCGC,EANH,kBACRnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACkB,EAAD,QCHOb,gBAAUY,GCKnBE,ERCKC,YACHpC,EACAQ,EACAJ,EAAiBiC,YAAgBC,IAAiBpC,KQF1DqC,IAASC,OACL1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAUN,MAAOA,GACbrB,EAAAC,EAAAC,cAAC0B,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.5dbfbb8f.chunk.js","sourcesContent":["export const QUEST_STATUS = {\r\n    DONE: 'DONE',\r\n    IN_PROGRESS: 'IN_PROGRESS',\r\n    NOT_STARTED: 'NOT_STARTED'\r\n};","export const LOAD_QUESTS = 'LOAD_QUESTS';\r\nexport const TOGGLE_QUEST_CARD = 'TOGGLE_QUEST_CARD';\r\n\r\nexport function loadQuests() {\r\n    return {\r\n        type: LOAD_QUESTS\r\n    }\r\n}\r\n\r\nexport function toggleQuestCard(questId) {\r\n    return {\r\n        type: TOGGLE_QUEST_CARD,\r\n        questId\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport {QUEST_STATUS} from \"../components/QuestsPage/QuestList/Quest/constants\";\r\n\r\nimport {\r\n    SELECT_SUBREDDIT,\r\n    INVALIDATE_SUBREDDIT,\r\n    REQUEST_POSTS,\r\n    RECEIVE_POSTS\r\n} from '../actions'\r\nimport {TOGGLE_QUEST_CARD} from \"../actions/quests\";\r\n\r\nfunction selectedSubreddit(state = 'reactjs', action) {\r\n    switch (action.type) {\r\n        case SELECT_SUBREDDIT:\r\n            return action.subreddit;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction posts(\r\n    state = {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: []\r\n    },\r\n    action\r\n) {\r\n    switch (action.type) {\r\n        case INVALIDATE_SUBREDDIT:\r\n            return {\r\n                ...state,\r\n                didInvalidate: true\r\n            };\r\n        case REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                didInvalidate: false\r\n            };\r\n        case RECEIVE_POSTS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                didInvalidate: false,\r\n                items: action.posts,\r\n                lastUpdated: action.receivedAt\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction postsBySubreddit(state = {}, action) {\r\n    switch (action.type) {\r\n        case INVALIDATE_SUBREDDIT:\r\n        case RECEIVE_POSTS:\r\n        case REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                [action.subreddit]: posts(state[action.subreddit], action)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst startingQuests = {\r\n    \"Demon Slayer\": {\r\n        \"name\": \"Demon Slayer\",\r\n        \"requirements\": [\r\n            \"Silverlight\"\r\n        ]\r\n    },\r\n    \"Prince Ali Rescue\": {\r\n        \"name\": \"Prince Ali Rescue\",\r\n        \"requirements\": [\r\n            \"Pink Skirt\"\r\n        ]\r\n    },\r\n    \"Recipe for Disaster\": {\r\n        \"name\": \"Recipe for Disaster\",\r\n        \"requirements\": [\r\n            \"A fuck ton\"\r\n        ]\r\n    },\r\n    \"Black Knight's Fortress\": {\r\n        \"name\": \"Black Knight's Fortress\",\r\n        \"requirements\": [\r\n            \"None\"\r\n        ]\r\n    },\r\n    \"Underground Pass\": {\r\n        \"name\": \"Underground Pass\",\r\n        \"requirements\": [\r\n            \"Bow, 40 ranged\"\r\n        ]\r\n    }\r\n};\r\n\r\nconst startingCards = {\r\n    \"Demon Slayer\": {\r\n        status: QUEST_STATUS.DONE,\r\n        reqsMet: false,\r\n        collapsed: true\r\n    },\r\n    \"Underground Pass\": {\r\n        status: QUEST_STATUS.NOT_STARTED,\r\n        reqsMet: false,\r\n        collapsed: true\r\n    },\r\n    \"Black Knight's Fortress\": {\r\n        status: QUEST_STATUS.NOT_STARTED,\r\n        reqsMet: true,\r\n        collapsed: true\r\n    },\r\n    \"Recipe for Disaster\": {\r\n        status: QUEST_STATUS.IN_PROGRESS,\r\n        reqsMet: false,\r\n        collapsed: true\r\n    },\r\n    \"Prince Ali Rescue\": {\r\n        status: QUEST_STATUS.DONE,\r\n        reqsMet: true,\r\n        collapsed: true\r\n    }\r\n};\r\n\r\nfunction quests(state = startingQuests, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction pageOptions(state = {}, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction cards(state = startingCards, action) {\r\n    switch (action.type) {\r\n        case TOGGLE_QUEST_CARD:\r\n            const {questId} = action;\r\n            return {\r\n                ...state,\r\n                [questId]: {\r\n                    ...state[questId],\r\n                    collapsed: !state[questId].collapsed\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    quests,\r\n    pageOptions,\r\n    cards\r\n});","import { combineReducers } from 'redux';\r\nimport questReducers from \"./questReducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    quests: questReducers\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(preLoadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preLoadedState,\r\n        composeEnhancers(applyMiddleware(thunkMiddleware, loggerMiddleware))\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './quest.css';\r\nimport {QUEST_STATUS} from \"./constants\";\r\n\r\nconst getQuestStatusClass = (status, reqsMet) => {\r\n    switch (status) {\r\n        case QUEST_STATUS.DONE:\r\n            return 'quest-done';\r\n        case QUEST_STATUS.IN_PROGRESS:\r\n            return 'quest-in-progress';\r\n        default:\r\n            if (reqsMet) {\r\n                return 'quest-can-start';\r\n            }\r\n            return 'quest-cannot-start';\r\n    }\r\n};\r\n\r\nconst Quest = ({quest, status, reqsMet, collapsed, toggleCard}) => {\r\n    const {name, requirements} = quest;\r\n\r\n    return (\r\n        <div className={'quest'}>\r\n            <div className={'quest-header'} onClick={() => toggleCard(name)}>\r\n                <div className={'quest-checkbox'}>\r\n                    <input type={'checkbox'} checked={status === QUEST_STATUS.DONE} />\r\n                </div>\r\n                <div className={`quest-name ${getQuestStatusClass(status, reqsMet)}`}>\r\n                    {name}\r\n                </div>\r\n                <div className={`chevron ${collapsed ? 'chevron-right' : 'chevron-down'}`} />\r\n            </div>\r\n            <div className={collapsed ? 'quest-collapsed' : 'quest-content'}>\r\n                <div className={'quest-requirements'}>\r\n                    Requirements: {requirements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nQuest.propTypes = {\r\n    quest: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        requirements: PropTypes.string.isRequired,\r\n        wikiLink: PropTypes.string\r\n    }).isRequired,\r\n    status: PropTypes.oneOf(Object.keys(QUEST_STATUS)).isRequired,\r\n    reqsMet: PropTypes.bool.isRequired,\r\n    collapsed: PropTypes.bool.isRequired,\r\n    toggleCard: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Quest;","import {connect} from 'react-redux';\r\n\r\nimport Quest from './Quest';\r\nimport {toggleQuestCard} from \"../../../../actions/quests\";\r\n\r\nexport default connect((state, { questId }) => {\r\n    return {\r\n        quest: state.quests.quests[questId],\r\n        ...state.quests.cards[questId]\r\n    }\r\n}, (dispatch) => {\r\n    return {\r\n        toggleCard: (id) => dispatch(toggleQuestCard(id))\r\n    }\r\n})(Quest);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport Quest from \"./Quest\";\r\nimport {QUEST_STATUS} from \"./Quest/constants\";\r\n\r\nconst QuestList = ({ quests, pageOptions, cards }) => {\r\n    // todo filter quests\r\n\r\n    return (\r\n        <div className={`quest-list`}>\r\n            {Object.keys(cards).map(questName => (\r\n                <Quest key={questName} questId={questName} {...cards[questName]} />\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nQuestList.propTypes = {\r\n    quests: PropTypes.objectOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        requirements: PropTypes.array.isRequired,\r\n        wikiLink: PropTypes.string\r\n    })).isRequired,\r\n    pageOptions: PropTypes.shape({\r\n        filters: PropTypes.array,\r\n        sortBy: PropTypes.string,\r\n        searchTerm: PropTypes.string\r\n    }),\r\n    cards: PropTypes.objectOf(PropTypes.shape({\r\n        status: PropTypes.oneOf(Object.keys(QUEST_STATUS)).isRequired,\r\n        reqsMet: PropTypes.bool.isRequired,\r\n        collapsed: PropTypes.bool.isRequired\r\n    })).isRequired\r\n};\r\n\r\nexport default QuestList;","import {connect} from 'react-redux';\r\n\r\nimport QuestList from './QuestList';\r\n\r\nexport default connect((state) => {\r\n    return {\r\n        quests: state.quests.quests,\r\n        pageOptions: state.quests.pageOptions,\r\n        cards: state.quests.cards\r\n    }\r\n})(QuestList);","import React from 'react';\r\n\r\nimport './quests-page.css';\r\nimport QuestList from \"./QuestList\";\r\n\r\nconst QuestsPage = () => (\r\n    <div className={`page-content quest-page`}>\r\n        <div className={`quest-page-title`}>Quests</div>\r\n        <div className={`quest-filters`}>Filters bruh</div>\r\n        <div className={`quest-list-container`}>\r\n            <QuestList />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default QuestsPage;","import React from 'react';\r\n\r\nimport './app.css';\r\nimport QuestsPage from \"../QuestsPage\";\r\n\r\nconst App = () => (\r\n    <div className='app'>\r\n        <QuestsPage/>\r\n    </div>\r\n);\r\n\r\nexport default App;","import App from \"./App\";\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nexport default connect()(App)","import React from 'react'\nimport ReactDom from 'react-dom'\n\nimport './index.css';\n\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\nimport App from './components/App';\n\nconst store = configureStore();\n\nReactDom.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}