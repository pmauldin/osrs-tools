{"version":3,"sources":["actions/index.js","reducers/index.js","configureStore.js","components/QuestsPage/QuestList/Quest/index.js","components/QuestsPage/QuestList/index.js","components/QuestsPage/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","rootReducer","combineReducers","postsBySubreddit","state","arguments","length","undefined","action","type","Object","objectSpread","defineProperty","subreddit","isFetching","didInvalidate","items","posts","lastUpdated","receivedAt","selectedSubreddit","loggerMiddleware","createLogger","preLoadedState","Quest","_ref","name","status","reqsMet","className","react_default","a","createElement","concat","QuestList","quests","map","quest","QuestList_Quest","assign","key","QuestsPage","QuestsPage_QuestList","App","components_QuestsPage","connect","store","createStore","applyMiddleware","thunkMiddleware","ReactDom","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.5c26cf4f.chunk.js","sourcesContent":["export const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\r\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT';\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\r\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\r\n\r\nexport function selectSubreddit(subreddit) {\r\n    return {\r\n        type: SELECT_SUBREDDIT,\r\n        subreddit\r\n    }\r\n}\r\n\r\nexport function invalidateSubreddit(subreddit) {\r\n    return {\r\n        type: INVALIDATE_SUBREDDIT,\r\n        subreddit\r\n    }\r\n}\r\n\r\nexport function requestPosts(subreddit) {\r\n    return {\r\n        type: REQUEST_POSTS,\r\n        subreddit\r\n    }\r\n}\r\n\r\nexport function receivePosts(subreddit, json) {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        subreddit,\r\n        posts: json.data.children.map(child => child.data),\r\n        receivedAt: Date.now()\r\n    }\r\n}\r\n\r\nfunction fetchPosts(subreddit) {\r\n    return async dispatch => {\r\n        let success = true;\r\n        try {\r\n            dispatch(requestPosts(subreddit));\r\n            const response = await fetch(`https://www.reddit.com/r/${subreddit}.json`);\r\n            const json = await response.json();\r\n            dispatch(receivePosts(subreddit, json));\r\n        } catch (err) {\r\n            console.error(\"Error fetching posts:\", err);\r\n            success = false;\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n    const posts = state.postsBySubreddit[subreddit];\r\n    if (!posts) {\r\n        return true;\r\n    } else if (posts.isFetching) {\r\n        return false;\r\n    } else {\r\n        return posts.didInvalidate;\r\n    }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n    return async (dispatch, getState) => {\r\n        if (shouldFetchPosts(getState(), subreddit)) {\r\n            try {\r\n                await dispatch(fetchPosts(subreddit));\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n\r\n        return 'done';\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport {\r\n    SELECT_SUBREDDIT,\r\n    INVALIDATE_SUBREDDIT,\r\n    REQUEST_POSTS,\r\n    RECEIVE_POSTS\r\n} from '../actions'\r\n\r\nfunction selectedSubreddit(state = 'reactjs', action) {\r\n    switch (action.type) {\r\n        case SELECT_SUBREDDIT:\r\n            return action.subreddit;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction posts(\r\n    state = {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: []\r\n    },\r\n    action\r\n) {\r\n    switch (action.type) {\r\n        case INVALIDATE_SUBREDDIT:\r\n            return {\r\n                ...state,\r\n                didInvalidate: true\r\n            };\r\n        case REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                didInvalidate: false\r\n            };\r\n        case RECEIVE_POSTS:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                didInvalidate: false,\r\n                items: action.posts,\r\n                lastUpdated: action.receivedAt\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction postsBySubreddit(state = {}, action) {\r\n    switch (action.type) {\r\n        case INVALIDATE_SUBREDDIT:\r\n        case RECEIVE_POSTS:\r\n        case REQUEST_POSTS:\r\n            return {\r\n                ...state,\r\n                [action.subreddit]: posts(state[action.subreddit], action)\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    postsBySubreddit,\r\n    selectedSubreddit\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default function configureStore(preLoadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preLoadedState,\r\n        applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n    )\r\n}","import React from 'react';\r\n\r\nconst Quest = ({ name, status, reqsMet }) => {\r\n\r\n    let className = 'quest-not-started';\r\n    if (status === \"In Progress\") {\r\n        className = 'quest-in-progress';\r\n    } else if (status === \"Done\") {\r\n        className = 'quest-done';\r\n    }\r\n\r\n    return (\r\n        <div className={`quest ${className}`}>\r\n            {`${name}: ${status}. Requirements Met: ${reqsMet}`}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Quest;","import React from 'react';\r\nimport Quest from \"./Quest\";\r\n\r\nconst QuestList = ({ quests }) => (\r\n    <div className={`quest-list`}>\r\n        {quests.map(quest => (\r\n            <Quest key={quest.name} {...quest} />\r\n        ))}\r\n    </div>\r\n);\r\n\r\nexport default QuestList;","import React from 'react';\r\n\r\nimport './quests.css';\r\nimport QuestList from \"./QuestList\";\r\n\r\nconst quests = [\r\n    {\r\n        name: \"Demon Slayer\",\r\n        status: \"Done\",\r\n        reqsMet: false\r\n    },\r\n    {\r\n        name: \"Prince Ali Rescue\",\r\n        status: \"Done\",\r\n        reqsMet: true\r\n    },\r\n    {\r\n        name: \"Recipe for Disaster\",\r\n        status: \"In Progress\",\r\n        reqsMet: true\r\n    },\r\n    {\r\n        name: \"Underground Pass\",\r\n        status: \"Not Started\",\r\n        reqsMet: false\r\n    }\r\n];\r\n\r\nconst QuestsPage = () => (\r\n    <div className={`page-content quest-page`}>\r\n        <div className={`quest-page-title`}>Quests</div>\r\n        <div className={`quest-filters`}>Filters bruh</div>\r\n        <div className={`quest-list-container`}>\r\n            <QuestList quests={quests} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default QuestsPage;","import React from 'react';\r\n\r\nimport './app.css';\r\nimport QuestsPage from \"../QuestsPage\";\r\n\r\nconst App = () => (\r\n    <div className='app'>\r\n        <QuestsPage/>\r\n    </div>\r\n);\r\n\r\nexport default App;","import App from \"./App\";\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nexport default connect()(App)","import React from 'react'\nimport ReactDom from 'react-dom'\n\nimport './index.css';\n\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\nimport App from './components/App';\n\nconst store = configureStore();\n\nReactDom.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}